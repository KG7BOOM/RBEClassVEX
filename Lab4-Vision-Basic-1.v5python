{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nright_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\n# AI Vision Color Descriptions\nai_vision_4__greenF = Colordesc(1, 21, 159, 72, 30, 0.32)\n# AI Vision Code Descriptions\nai_vision_4 = AiVision(Ports.PORT4, ai_vision_4__greenF)\nbumper_g = Bumper(brain.three_wire_port.g)\ncontroller_1 = Controller(PRIMARY)\narm_motor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nclaw = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n'''\nThis code demonstrates a basic search and drive towards behaviour with the camera.\n\nThe robot has three states:\n    IDLE - waiting for the button press\n    SEARCHING - spins slowly until it finds an object\n    APPROACHING - drives towards the object\n\nCamera checking is done on a timer. If no object is found, a counter is incremented and\nif the counter reaches a threshold, the robot goes back into searching mode.\n'''\n\n## Define states and state variable\nROBOT_IDLE = 0\nROBOT_SEARCHING = 1\nROBOT_APPROACHING = 2\nROBOT_GRAB = 3\n\ncurrent_state = ROBOT_IDLE\n\n'''\nWe'll use a timer to read the camera every cameraInterval milliseconds\n'''\ncameraInterval = 50\ncameraTimer = Timer()\n\ndef handleButton():\n    global current_state\n\n    if(current_state == ROBOT_IDLE):\n        print('IDLE -> SEARCHING') ## Pro-tip: print out state _transitions_\n        current_state = ROBOT_SEARCHING\n        left_motor.spin(FORWARD, 30)\n        right_motor.spin(FORWARD, -30)\n\n        ## start the timer for the camera\n        cameraTimer.event(cameraTimerCallback, cameraInterval)\n    \n    elif(current_state == ROBOT_SEARCHING):\n        current_state = ROBOT_GRAB\n\n    else: ## failsafe; go to IDLE from any other state when button is pressed\n        print(' -> IDLE')\n        current_state = ROBOT_IDLE\n        left_motor.stop()\n        right_motor.stop()\n\nbumper_g.pressed(handleButton)\ncontroller_1.buttonUp.pressed(handleButton)\n\ndef cameraTimerCallback():\n    global current_state\n    global missedDetections\n\n    ## Here we use a checker-handler, where the checker checks if there is a new object detection.\n    ## We don't use a \"CheckForObjects()\" function because take_snapshot() acts as the checker.\n    ## It returns a non-empty list if there is a detection.\n    objects = ai_vision_4.take_snapshot(ai_vision_4__greenF)\n    if objects: handleObjectDetection()\n\n    # restart the timer\n    if(current_state != ROBOT_IDLE):\n        cameraTimer.event(cameraTimerCallback, cameraInterval)\n\ndef handleObjectDetection():\n    global current_state\n    global object_timer\n\n    if current_state == ROBOT_SEARCHING:\n        print('SEARCHING -> APPROACHING') ## Pro-tip: print out state _transitions_\n        current_state = ROBOT_APPROACHING\n\n    ## Not elif, because we want the logic to cascade\n    if current_state == ROBOT_APPROACHING:\n\n        cx = ai_vision_4.largest_object().centerX\n        cy = ai_vision_4.largest_object().centerY\n\n        target_x = 160\n        K_x = 0.5\n\n        error = cx - target_x\n        turn_effort = K_x * error\n\n        target_arm = 117\n        K_arm = 0.5\n\n        errorArm = cy - target_arm\n        arm_effort = K_arm * errorArm\n\n\n        ## TODO: Edit code to approach or back up to hold the right position\n        left_motor.spin(REVERSE, 40 + turn_effort)\n        right_motor.spin(REVERSE, 40 - turn_effort)\n        arm_motor.spin(REVERSE, 20 - arm_effort)\n\n        test = .3048*54\n        output = cy/test\n        brain.screen.set_cursor(1, 1)\n        brain.screen.print(output)\n\n        if ((output) < .1):\n            current_state = ROBOT_GRAB\n    \n    if current_state == ROBOT_GRAB:\n        left_motor.spin_for(FORWARD, 450, DEGREES)\n        right_motor.spin_for(FORWARD, 450, DEGREES)\n        claw.spin_for(FORWARD, 50, DEGREES)\n\n    \n        \n\n\n\n## Our main loop\nwhile True:\n    pass\n","textLanguage":"python","robotConfig":[{"port":[10],"name":"left_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"right_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"ai_vision_4","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"greenF\",\"nameValid\":\"Valid\",\"lastValidName\":\"greenF\",\"red\":21.36111111111111,\"green\":159.17708333333334,\"blue\":71.70833333333333,\"hueRange\":30,\"saturationRange\":0.32}],\"codes\":[],\"tags\":false,\"AIObjects\":false,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":0}","isConfigured":"false"},"triportSourcePort":22},{"port":[7],"name":"bumper_g","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}
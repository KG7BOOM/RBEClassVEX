{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ninertial_20 = Inertial(Ports.PORT20)\nline_tracker_b = Line(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nROBOT_IDLE = 0\nROBOT_FORWARD = 1\nROBOT_BACKWARD = 2\n\nrobotState = ROBOT_IDLE\n\ncontroller = Controller()\nbrain = Brain()\n\nimu = Inertial(Ports.PORT19)\nimu.calibrate()\nwhile imu.is_calibrating():\n    pass\nimu.set_rotation(180, DEGREES)\nline = Line(brain.three_wire_port.b)\n\nleft_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_motor = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\n\ndef IMU_event_handler():\n    print(imu.rotation())\n\n    ## TODO: Nested checker to see if we've turned far enough\n    ## You'll need to check the state and then the value\n    if (robotState == ROBOT_FORWARD): pass\n    elif (robotState == ROBOT_BACKWARD): pass\n\nimu.changed(IMU_event_handler)\n\ninitialHeading = 0\n\ndef controlHeading(targetHeading, forwardSpeed):\n    global robotState\n    Kp = 20\n    target = targetHeading\n    previouslyDark = False\n\n    while True:\n        imuHeading = imu.rotation(DEGREES)\n\n        error = target - imuHeading \n        effort = error * Kp\n        left_motor.spin(REVERSE, forwardSpeed + effort, DPS) \n        right_motor.spin(REVERSE, forwardSpeed - effort, DPS)\n\n        if (line_tracker_b.reflectivity(PERCENT) > 70) and (robotState == ROBOT_FORWARD) and (previouslyDark == 1):\n            robotState = ROBOT_BACKWARD\n            break\n        if (line_tracker_b.reflectivity(PERCENT) > 70) and (robotState == ROBOT_BACKWARD) and (previouslyDark == 1):\n            robotState = ROBOT_IDLE\n            break\n        if line_tracker_b.reflectivity(PERCENT) < 70:\n            previouslyDark = True\n            pass\n        pass\n    pass\n\n## Button handler. Note that we check the state and then act accordingly\ndef handleLeft1Button():\n    global robotState\n    robotState = ROBOT_FORWARD\n    while True:\n        if robotState == ROBOT_FORWARD:\n            controlHeading(180, 800)\n            pass\n        if robotState == ROBOT_BACKWARD:\n            controlHeading(0, 800)\n            pass\n        if robotState == ROBOT_IDLE:\n            left_motor.stop() \n            right_motor.stop()\n            pass\n        pass\n    pass\n\ncontroller.buttonL1.pressed(handleLeft1Button)\n\nwhile True:\n    pass","textLanguage":"python","robotConfig":[{"port":[20],"name":"inertial_20","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[2],"name":"line_tracker_b","customName":false,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}